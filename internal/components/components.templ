package components

import (
	"strconv"
	"github.com/gluek/timetracker/internal/database"
	"github.com/spf13/viper"
	"time"
	"fmt"
	"log"
	"strings"
) 

var version string = "v0.5.4"

func yearSelectList() []int {
	currentYear := time.Now().Year()
	years := []int{}
	for i := range 5 {
		years = append(years, currentYear-i)
	}
	return years
}

func monthSelectList() []string {
	months := []string{"January",
		"February",
		"March",
		"April",
		"May",
		"June",
		"July",
		"August",
		"September",
		"October",
		"November",
		"December"}
	return months
}

func reformateDateString(date string) string {
	dateParse, err := time.Parse("Mon Jan 2 2006", date)
	if err != nil {
		log.Println(fmt.Errorf("reformateDateString: %w", err))
	}
	return dateParse.Format("2006-01-02")
}

func workHoursMonth(workdays int) float64 {
	workHoursPerWeek, err := time.ParseDuration(viper.GetString("worktime_per_week"))
	if err != nil {
		log.Println(fmt.Errorf("workHoursMonth: %w", err))
	}
	workHoursPerDay := workHoursPerWeek.Hours() / 5
	return workHoursPerDay * float64(workdays)
}

func hoursToDays(hours string) string {
	workHoursPerWeek, err := time.ParseDuration(viper.GetString("worktime_per_week"))
	if err != nil {
		log.Println(fmt.Errorf("hoursToDays: %w", err))
	}
	hoursTime, err := time.ParseDuration(hours + "h")
	if err != nil {
		log.Println(fmt.Errorf("hoursToDays: %w", err))
	}
	days := hoursTime.Hours() / workHoursPerWeek.Hours() * 5
	return fmt.Sprintf("%.1f", days)
}

func workHoursMonthDelta(workdays int, total database.ProjectHours) time.Duration {
	workHoursMonth := workHoursMonth(workdays)
	totalDuration, err := time.ParseDuration(total.Hours + "h")
	if err != nil {
		log.Println(fmt.Errorf("workHoursMonthDelta totalDuration: %w", err))
	}
	workHoursMonthDuration, err := time.ParseDuration(fmt.Sprintf("%.2fh", workHoursMonth))
	if err != nil {
		log.Println(fmt.Errorf("workHoursMonth workHoursMonthDuration: %w", err))
	}
	deltaDuration := totalDuration - workHoursMonthDuration
	return deltaDuration
}

func workHoursDailyDelta(workhoursDaily time.Duration) time.Duration {
	workHoursPerWeek, err := time.ParseDuration(viper.GetString("worktime_per_week"))
	if err != nil {
		log.Println(fmt.Errorf("hoursToDays: %w", err))
	}
	deltaDuration := workhoursDaily - (workHoursPerWeek / 5)
	return deltaDuration
}

func durationStrToFloat(duration string) float64 {
	durFloat, err := time.ParseDuration(duration)
	if err != nil {
		log.Println(fmt.Errorf("durationStrToFloat: %w", err))
	}
	return durFloat.Hours()
}

func fmtDuration(d time.Duration) string {
	d = d.Round(time.Minute)
	h := d / time.Hour
	d -= h * time.Hour
	m := d / time.Minute
	sign := ""
	if d < 0 {
		sign = "-"
	}
	return fmt.Sprintf("%s%02dh%02dm", sign, h.Abs(), m.Abs())
}

templ PageHeader(contents templ.Component) {
	<!DOCTYPE html>
	<html lang="en-US">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Time Tracker</title>
			<link rel="stylesheet" href="/static/internal/assets/css/input.css"/>
			<link rel="icon" type="image/x-icon" href="/static/internal/assets/favicon.ico"/>
			<script src="/static/internal/assets/js/htmx.min.js"></script>
			<script src="/static/internal/assets/js/echarts.min.js"></script>
		</head>
		<body>
			<div class="flex flex-col">
				<div class="navbar border-b shadow">
					<div class="container mx-auto max-w-[1000px] grow">
						<div class="hero-content h-20">
							<a class="primary-content text-5xl font-bold" href="/">TimeTracker</a>
							<p class="primary-content self-end">{ version }</p>
						</div>
						<div class="grow"></div>
						<button class="btn btn-ghost text-xl" hx-get="/timeframes" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Records</button>
						<button class="btn btn-ghost text-xl" hx-get="/projects" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Projects</button>
						<div class="divider divider-horizontal"></div>
						<button class="btn btn-ghost text-xl" hx-get="/month" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Month</button>
						<button class="btn btn-ghost text-xl" hx-get="/year" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Year</button>
					</div>
				</div>
				<div class="container mx-auto max-w-[1000px] grow">
					<section id="content-section">
						@contents
					</section>
				</div>
			</div>
		</body>
	</html>
}

templ DarkModeSwitch() {
	<label class="swap swap-rotate">
		<form>
			<!-- this hidden checkbox controls the state -->
			<input type="checkbox" class="theme-controller" value="emerald" hx-post="/theme"/>
			<!-- sun icon -->
			<svg class="swap-on h-10 w-10 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z"></path></svg>
			<!-- moon icon -->
			<svg class="swap-off h-10 w-10 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z"></path></svg>
		</form>
	</label>
}

templ HomePage(tfList []database.Timeframe, projectList []database.Project, locationList []database.Location,
currentDate time.Time, workDurationDaily time.Duration, workDeltaWeek time.Duration, overtime database.ProjectHours) {
	@PageHeader(Records(tfList, projectList, locationList, currentDate, workDurationDaily, workDeltaWeek, overtime))
}

templ Records(tfList []database.Timeframe, projectList []database.Project, locationList []database.Location,
 currentDate time.Time, workDurationDaily time.Duration, workDeltaWeek time.Duration, overtime database.ProjectHours) {
	<div id="records" class="grid justify-center space-y-5 py-5">
		@CreateRecord(projectList, locationList, currentDate)
		@RecordList(tfList, projectList, locationList)
		@dailySummary(workDurationDaily, workDeltaWeek, overtime)
	</div>
}

templ CreateRecord(projectList []database.Project, locationList []database.Location, currentDate time.Time) {
	<div class="card w-min justify-self-center bg-base-300 shadow" id="timetracker">
		<div class="card-body">
			<form id="defaultRecord" hx-post="/api/timeframes" hx-target="#content-section" hx-swap="innerHTML settle:0ms">
				<div class="flex justify-center space-x-5">
					<button class="btn btn-neutral animate-none self-center" hx-post="/api/currentdate/left" hx-target="#content-section" hx-swap="innerHTML settle:0ms">
						<svg class="h-5 w-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
						<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m-12 0L5 1m-4 4L5 9"/>
						</svg>
					</button>
					<input
						class="input input-lg bg-neutral text-neutral-content"
						hx-post="/api/currentdate"
						hx-trigger="change delay:1000ms"
						type="date"
						name="dateofrecord"
						id="dateofrecord"
						value={ currentDate.Format("2006-01-02") }
					/>
					<button class="btn btn-neutral animate-none self-center" hx-post="/api/currentdate/right" hx-target="#content-section" hx-swap="innerHTML settle:0ms">
						<svg class="h-5 w-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
						<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
						</svg>
					</button>
				</div>
				<div class="flex flex-row content-center justify-center space-x-1">
					<label class="form-control w-full max-w-xs">
						<div class="label">
							<span class="label-text">From:</span>
						</div>
						<input class="input rounded bg-neutral text-neutral-content" type="time" name="start" id="start" value="08:00"/>
					</label>
					<label class="form-control w-full max-w-xs">
						<div class="label">
							<span class="label-text">To:</span>
						</div>
						<input class="input rounded bg-neutral text-neutral-content" type="time" name="end" id="end" value="17:00"/>
					</label>
					<label class="form-control w-full max-w-xs">
						<div class="label">
							<span class="label-text">Project:</span>
						</div>
						<div class="flex flex-row space-x-1">
							<select class="select rounded bg-neutral text-neutral-content" id="project" name="project">
								for _, project := range projectList {
									<option value={ strconv.Itoa(project.ID) }>{ project.Name }</option>
								}
							</select>
						</div>
					</label>
					<label class="form-control w-full max-w-xs">
						<div class="label">
							<span class="label-text">Location:</span>
						</div>
						<div class="flex flex-row space-x-1">
							<select class="select rounded bg-neutral text-neutral-content" id="location" name="location">
								for _, location := range locationList {
									<option value={ strconv.Itoa(location.ID) }>{ location.Name }</option>
								}
							</select>
							<button class="btn btn-success animate-none" type="submit" form="defaultRecord">&#x2713;</button>
						</div>
					</label>
				</div>
			</form>
			@Quickbar()
		</div>
	</div>
}

templ RecordList(tfList []database.Timeframe, projectList []database.Project, locationList []database.Location) {
	<div id="record-list">
		if len(tfList) > 0 {
			<div class="card bg-base-300 shadow">
				<div class="card-body">
					for _, timeframe := range tfList {
						<form id={ "record" + strconv.Itoa(timeframe.ID) } onkeypress="return event.keyCode != 13;" hx-post="/api/timeframes" hx-target="#content-section" hx-swap="innerHTML settle:0ms">
							<div class="flex flex-row justify-center space-x-1">
								<input class="input input-sm rounded bg-neutral text-neutral-content" type="hidden" name="dateofrecord" id="dateofrecord" value={ timeframe.Date }/>
								<input
									class="input input-sm rounded bg-neutral text-neutral-content"
									type="time"
									name="start"
									id="start"
									value={ timeframe.Start }
									hx-put={ "/api/timeframes/" + strconv.Itoa(timeframe.ID) }
									hx-target="#summary-day"
									hx-select="#summary-day"
									hx-swap="outerHTML"
									hx-trigger="change delay:400ms"
								/>
								<input
									class="input input-sm rounded bg-neutral text-neutral-content"
									type="time"
									name="end"
									id="end"
									value={ timeframe.End }
									hx-put={ "/api/timeframes/" + strconv.Itoa(timeframe.ID) }
									hx-target="#summary-day"
									hx-select="#summary-day"
									hx-swap="outerHTML"
									hx-trigger="change delay:400ms"
								/>
								<select
									class="select select-sm rounded bg-neutral text-neutral-content"
									id="project"
									name="project"
									hx-put={ "/api/timeframes/" + strconv.Itoa(timeframe.ID) }
									hx-target="#summary-day"
									hx-select="#summary-day"
									hx-swap="none"
									hx-trigger="change delay:400ms"
								>
									for _, project := range projectList {
										if timeframe.ProjectID == project.ID {
											<option value={ strconv.Itoa(project.ID) } selected>{ project.Name }</option>
										} else {
											<option value={ strconv.Itoa(project.ID) }>{ project.Name }</option>
										}
									}
								</select>
								<select
									class="select select-sm rounded bg-neutral text-neutral-content"
									id="location"
									name="location"
									hx-put={ "/api/timeframes/" + strconv.Itoa(timeframe.ID) }
									hx-target="#summary-day"
									hx-select="#summary-day"
									hx-swap="none"
									hx-trigger="change delay:400ms"
								>
									for _, location := range locationList {
										if timeframe.LocationID == location.ID {
											<option value={ strconv.Itoa(location.ID) } selected>{ location.Name }</option>
										} else {
											<option value={ strconv.Itoa(location.ID) }>{ location.Name }</option>
										}
									}
								</select>
								<button class="btn btn-error btn-sm animate-none" hx-delete={ "/api/timeframes/" + strconv.Itoa(timeframe.ID) } hx-target="#content-section" hx-swap="innerHTML settle:0ms">&#x2717;</button>
							</div>
						</form>
					}
				</div>
			</div>
		}
	</div>
}

templ dailySummary(workDurationDaily time.Duration, workDeltaWeek time.Duration, overtime database.ProjectHours) {
	<div id="summary-day">
		<div class="card bg-base-300 shadow">
			<div class="card-body">
				<div class="flex flex-col">
					<div class="text-xl">Daily Summary:</div>
					<table class="table">
						<thead></thead>
						<tbody>
							<tr>
								<td>Total Work / Delta:</td>
								<td>{ fmtDuration(workDurationDaily) } / { fmtDuration(workHoursDailyDelta(workDurationDaily)) }</td>
							</tr>
							<tr>
								<td>Delta Week:</td>
								if workDeltaWeek.Hours() < 0 {
									<td class="text-error">{ fmtDuration(workDeltaWeek) }</td>
								} else {
									<td class="text-success">{ fmtDuration(workDeltaWeek) }</td>
								}
							</tr>
							<tr>
								<td>Overtime:</td>
								<td>{ overtime.Hours }</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
}

templ Projects(projectList []database.Project) {
	<div id="projects" class="grid justify-center space-y-5 py-5">
		@CreateProject()
		@ProjectsList(projectList)
	</div>
}

templ CreateProject() {
	<div id="projecttracker" class="card bg-base-300 shadow">
		<form id="defaultProject" class="card-body" hx-post="/api/projects" hx-target="#projects" hx-swap="outerHTML settle:0ms">
			<div class="text-xl">Add New Project:</div>
			<div class="flex flex-row justify-center space-x-1">
				<input class="input rounded bg-neutral text-neutral-content" type="text" id="activity" name="activity" placeholder="Activity" required/>
				<input class="input rounded bg-neutral text-neutral-content" type="text" id="details" name="details" placeholder="Details" required/>
				<input class="input rounded bg-neutral text-neutral-content" type="text" id="projectName" name="projectName" placeholder="Identifier" required/>
				<button class="btn btn-success animate-none" type="submit" form="defaultProject">&#x2713;</button>
			</div>
		</form>
	</div>
}

templ ProjectsList(projectList []database.Project) {
	if len(projectList) > 4 {
		<div id="timetrackerList" class="card bg-base-300 shadow">
			<div class="card-body">
				for _, project := range projectList[4:] {
					<form id={ "project" + strconv.Itoa(project.ID) } onkeypress="return event.keyCode != 13;" hx-post="/api/projects" hx-target="#projects" hx-swap="outerHTML settle:0ms">
						<div class="flex flex-row justify-center space-x-1">
							<input
								class="input input-sm rounded bg-neutral text-neutral-content"
								type="text"
								id="activity"
								name="activity"
								value={ project.Activity }
								hx-put={ "/api/projects/" + strconv.Itoa(project.ID) }
								hx-target="#projects"
								hx-swap="none"
								hx-trigger="change delay:100ms"
							/>
							<input
								class="input input-sm rounded bg-neutral text-neutral-content"
								type="text"
								id="details"
								name="details"
								value={ project.Details }
								hx-put={ "/api/projects/" + strconv.Itoa(project.ID) }
								hx-target="#projects"
								hx-swap="none"
								hx-trigger="change delay:100ms"
							/>
							<input
								class="input input-sm rounded bg-neutral text-neutral-content"
								type="text"
								id="projectName"
								name="projectName"
								value={ project.Name }
								hx-put={ "/api/projects/" + strconv.Itoa(project.ID) }
								hx-target="#projects"
								hx-swap="none"
								hx-trigger="change delay:100ms"
							/>
							<button class="btn btn-error btn-sm animate-none" hx-delete={ "/api/projects/" + strconv.Itoa(project.ID) } hx-target="#projects" hx-swap="outerHTML settle:0ms">&#x2717;</button>
						</div>
					</form>
				}
			</div>
		</div>
	}
}

templ MonthlySummary(activeMonth time.Time, projects []database.ProjectHours, workdays int, entries []database.ProjectHoursLocationsDaily, locations []database.LocationDays) {
	<div id="monthly-summary" class="grid justify-center space-y-5 py-5">
		<div class="card bg-base-300 shadow">
			<div class="card-body">
				<form class="flex flex-row justify-center space-x-1" hx-post="/api/monthlysummary" hx-target="#monthly-summary" hx-select="#monthly-summary" hx-swap="outerHTML">
					<select
						class="select rounded bg-neutral text-xl text-neutral-content"
						id="month"
						name="month"
						hx-post="/api/monthlysummary"
						hx-target="#monthly-summary"
						hx-select="#monthly-summary"
						hx-swap="outerHTML"
						hx-trigger="change delay:100ms"
						hx-preserve="true"
					>
						for _, month := range monthSelectList() {
							if month == activeMonth.Month().String() {
								<option selected>{ month }</option>
							} else {
								<option>{ month }</option>
							}
						}
					</select>
					<select
						class="select rounded bg-neutral text-xl text-neutral-content"
						id="year"
						name="year"
						hx-post="/api/monthlysummary"
						hx-target="#monthly-summary"
						hx-select="#monthly-summary"
						hx-swap="outerHTML"
						hx-trigger="change delay:100ms"
						hx-preserve="true"
					>
						for _, year := range yearSelectList() {
							if year == activeMonth.Year() {
								<option selected>{ strconv.Itoa(year) }</option>
							} else {
								<option>{ strconv.Itoa(year) }</option>
							}
						}
					</select>
				</form>
				<div class="text-xl">Monthly Summary:</div>
				<table id="monthly-summary-table" class="table">
					<thead>
						<td>Activity:</td>
						<td>Details:</td>
						<td>Name:</td>
						<td>Work Hours:</td>
					</thead>
					<tbody>
						for _, project := range projects[:4] {
							<tr class="bg-base-200">
								<td>{ project.Activity }</td>
								<td>{ project.Details }</td>
								<td>{ project.Name }</td>
								<td>{ project.Hours }</td>
							</tr>
						}
						for _, project := range projects[4:] {
							<tr>
								<td>{ project.Activity }</td>
								<td>{ project.Details }</td>
								<td>{ project.Name }</td>
								<td>{ project.Hours }</td>
							</tr>
						}
					</tbody>
				</table>
				<button class="btn btn-success animate-none" type="button" hx-post="/api/clipboard" hx-swap="none">Summary to Clipboard</button>
			</div>
		</div>
		@WorkDays(workdays, projects[len(projects)-1])
		@LocationsCard(locations)
		@OverviewRecords(entries)
	</div>
}

templ WorkDays(workdays int, total database.ProjectHours) {
	<div id="work-days" class="card bg-base-300 shadow">
		<div class="card-body">
			<table
				id="work-days-table"
				class="table"
			>
				<thead></thead>
				<tbody>
					<tr>
						<td>Work Days:</td>
						<td>{ fmt.Sprintf("%d", workdays) }</td>
					</tr>
					<tr>
						<td>Work Hours Month:</td>
						<td>{ fmt.Sprintf("%.2f", workHoursMonth(workdays)) }</td>
					</tr>
					<tr>
						<td>Delta Work Hours Month:</td>
						if workHoursMonthDelta(workdays, total).Hours() < 0 {
							<td class="text-error">{ fmt.Sprintf("%.2f", workHoursMonthDelta(workdays, total).Hours()) }</td>
						} else {
							<td class="text-success">{ fmt.Sprintf("%.2f", workHoursMonthDelta(workdays, total).Hours()) }</td>
						}
					</tr>
				</tbody>
			</table>
		</div>
	</div>
}

templ LocationsCard(locations []database.LocationDays) {
	<div id="locations" class="card bg-base-300 shadow">
		<div class="card-body">
			@Locations(locations)
		</div>
	</div>
}

templ Locations(locations []database.LocationDays) {
	<table id="locations-table" class="table">
		<thead>
			<td>Work Place:</td>
			<td>Days:</td>
		</thead>
		<tbody>
			for _, location := range locations {
				<tr>
					<td>{ location.Name }</td>
					<td>{ fmt.Sprintf("%d", location.Days) }</td>
				</tr>
			}
		</tbody>
	</table>
}

templ OverviewRecords(entries []database.ProjectHoursLocationsDaily) {
	<div id="overview-records" class="card bg-base-300 shadow">
		<div class="card-body">
			<table class="table table-xs">
				<thead>
					<td>Date:</td>
					<td>Hours:</td>
					<td>Projects:</td>
					<td>Work Places:</td>
				</thead>
				<tbody>
					for _, entry := range entries {
						if strings.Contains(entry.Date, "Sat") || strings.Contains(entry.Date, "Sun") {
							<tr class="bg-base-200">
								<td><a class="link" hx-get={ "/timeframes/" + reformateDateString(entry.Date) } hx-target="#content-section" hx-swap="innerHTML settle:0ms">{ entry.Date }</a></td>
								<td>{ entry.Hours }</td>
								<td>{ strings.Join(entry.Projects, ", ") }</td>
								<td>{ strings.Join(entry.Locations, ", ") }</td>
							</tr>
						} else {
							<tr>
								<td><a class="link" hx-get={ "/timeframes/" + reformateDateString(entry.Date) } hx-target="#content-section" hx-swap="innerHTML settle:0ms">{ entry.Date }</a></td>
								<td>{ entry.Hours }</td>
								<td>{ strings.Join(entry.Projects, ", ") }</td>
								<td>{ strings.Join(entry.Locations, ", ") }</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ YearlySummary(activeYear time.Time, projects []database.ProjectHours, overtime database.ProjectHours, locations []database.LocationDays) {
	<div id="yearly-summary" class="flex justify-center gap-5 py-5">
		@pieChart(projects[4:])
		<div class="card w-full bg-base-300 shadow">
			<div class="card-body flex-row">
				<div id="piechart" class="h-[400px] w-[500px]"></div>
				<div class="w-[400px] self-center">
					<form class="flex justify-center" hx-post="/api/yearlysummary" hx-target="#yearly-summary" hx-select="#yearly-summary" hx-swap="outerHTML">
						<select
							class="select rounded bg-neutral text-xl text-neutral-content"
							id="yearSummary"
							name="year"
							hx-post="/api/yearlysummary"
							hx-target="#yearly-summary"
							hx-select="#yearly-summary"
							hx-swap="outerHTML"
							hx-trigger="change delay:100ms"
							hx-preserve="true"
						>
							for _, year := range yearSelectList() {
								if year == activeYear.Year() {
									<option selected>{ strconv.Itoa(year) }</option>
								} else {
									<option>{ strconv.Itoa(year) }</option>
								}
							}
						</select>
					</form>
					<div class="text-xl">Yearly Summary:</div>
					<table id="yearly-summary-table" class="table">
						<thead>
							<td>Name:</td>
							<td>Hours:</td>
							<td>Days:</td>
						</thead>
						<tbody>
							for _, project := range projects[1:4] {
								<tr class="bg-base-200">
									<td>{ project.Name }</td>
									<td>{ project.Hours }</td>
									<td>{ hoursToDays(project.Hours) }</td>
								</tr>
							}
							<tr class="bg-base-200">
								<td>{ overtime.Name }</td>
								<td>{ overtime.Hours }</td>
								<td>{ hoursToDays(overtime.Hours) }</td>
							</tr>
						</tbody>
					</table>
					@Locations(locations)
				</div>
			</div>
		</div>
	</div>
}

templ Quickbar() {
	<div class="flex flex-row pt-2">
		<button class="btn btn-outline btn-sm w-min animate-none" hx-post="/api/quickbar/vacation" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Vacation</button>
	</div>
}
