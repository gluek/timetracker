package components

import (
	"fmt"
	"github.com/gluek/timetracker/internal/database"
	"github.com/spf13/viper"
	"log"
	"time"
)

var version string = "v0.6.2"

func yearSelectList() []int {
	currentYear := time.Now().Year()
	years := []int{}
	for i := range 5 {
		years = append(years, currentYear-i)
	}
	return years
}

func monthSelectList() []string {
	months := []string{"January",
		"February",
		"March",
		"April",
		"May",
		"June",
		"July",
		"August",
		"September",
		"October",
		"November",
		"December"}
	return months
}

func reformateDateString(date string) string {
	dateParse, err := time.Parse("Mon Jan 2 2006", date)
	if err != nil {
		log.Println(fmt.Errorf("reformateDateString: %w", err))
	}
	return dateParse.Format("2006-01-02")
}

func workHoursMonth(workdays int) float64 {
	workHoursPerWeek, err := time.ParseDuration(viper.GetString("worktime_per_week"))
	if err != nil {
		log.Println(fmt.Errorf("workHoursMonth: %w", err))
	}
	workHoursPerDay := workHoursPerWeek.Hours() / 5
	return workHoursPerDay * float64(workdays)
}

func hoursToDays(hours string) string {
	workHoursPerWeek, err := time.ParseDuration(viper.GetString("worktime_per_week"))
	if err != nil {
		log.Println(fmt.Errorf("hoursToDays: %w", err))
	}
	hoursTime, err := time.ParseDuration(hours + "h")
	if err != nil {
		log.Println(fmt.Errorf("hoursToDays: %w", err))
	}
	days := hoursTime.Hours() / workHoursPerWeek.Hours() * 5
	return fmt.Sprintf("%.1f", days)
}

func workHoursMonthDelta(workdays int, total database.ProjectHours) time.Duration {
	workHoursMonth := workHoursMonth(workdays)
	totalDuration, err := time.ParseDuration(total.Hours + "h")
	if err != nil {
		log.Println(fmt.Errorf("workHoursMonthDelta totalDuration: %w", err))
	}
	workHoursMonthDuration, err := time.ParseDuration(fmt.Sprintf("%.2fh", workHoursMonth))
	if err != nil {
		log.Println(fmt.Errorf("workHoursMonth workHoursMonthDuration: %w", err))
	}
	deltaDuration := totalDuration - workHoursMonthDuration
	return deltaDuration
}

func workHoursDailyDelta(workhoursDaily time.Duration) time.Duration {
	workHoursPerWeek, err := time.ParseDuration(viper.GetString("worktime_per_week"))
	if err != nil {
		log.Println(fmt.Errorf("hoursToDays: %w", err))
	}
	deltaDuration := workhoursDaily - (workHoursPerWeek / 5)
	return deltaDuration
}

func durationStrToFloat(duration string) float64 {
	durFloat, err := time.ParseDuration(duration)
	if err != nil {
		log.Println(fmt.Errorf("durationStrToFloat: %w", err))
	}
	return durFloat.Hours()
}

func fmtDuration(d time.Duration) string {
	d = d.Round(time.Minute)
	h := d / time.Hour
	d -= h * time.Hour
	m := d / time.Minute
	sign := ""
	if d < 0 {
		sign = "-"
	}
	return fmt.Sprintf("%s%02dh%02dm", sign, h.Abs(), m.Abs())
}

templ PageHeader(contents templ.Component) {
	<!DOCTYPE html>
	<html lang="en-US">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Time Tracker</title>
			<link rel="stylesheet" href="/static/internal/assets/css/input.css"/>
			<link rel="icon" type="image/x-icon" href="/static/internal/assets/favicon.ico"/>
			<script src="/static/internal/assets/js/htmx.min.js"></script>
			<script src="/static/internal/assets/js/echarts.min.js"></script>
		</head>
		<body>
			<div class="flex flex-col">
				//default navbar
				<div class="navbar hidden border-b shadow md:flex">
					<div class="container mx-auto max-w-[1000px] grow">
						<div class="hero-content h-20">
							<a class="primary-content text-5xl font-bold" href="/">TimeTracker</a>
							<p class="primary-content self-end">{ version }</p>
						</div>
						<div class="grow"></div>
						<button class="btn btn-ghost text-xl" hx-get="/timeframes" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Records</button>
						<button class="btn btn-ghost text-xl" hx-get="/projects" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Projects</button>
						<div class="divider divider-horizontal"></div>
						<button class="btn btn-ghost text-xl" hx-get="/month" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Month</button>
						<button class="btn btn-ghost text-xl" hx-get="/year" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Year</button>
						<div class="divider divider-horizontal"></div>
						<button class="btn btn-ghost text-xl" hx-get="/vacation" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Planner</button>
					</div>
				</div>
				// mobile navbar
				<div class="navbar flex border-b shadow md:hidden">
					<div class="flex w-full flex-col">
						<div class="hero-content h-14">
							<a class="primary-content text-5xl font-bold" href="/">TimeTracker</a>
							<p class="primary-content self-end">{ version }</p>
						</div>
						<div class="flex w-full flex-row">
							<button class="btn btn-ghost flex-1 text-xl" hx-get="/timeframes" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Rec</button>
							<button class="btn btn-ghost flex-1 text-xl" hx-get="/projects" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Proj</button>
							<div class="divider divider-horizontal"></div>
							<button class="btn btn-ghost flex-1 text-xl" hx-get="/month" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Month</button>
							<button class="btn btn-ghost flex-1 text-xl" hx-get="/year" hx-target="#content-section" hx-swap="innerHTML settle:0ms">Year</button>
						</div>
					</div>
				</div>
				<div class="flex justify-center">
					<section class="grow" id="content-section">
						@contents
					</section>
				</div>
			</div>
		</body>
	</html>
}

templ DarkModeSwitch() {
	<label class="swap swap-rotate">
		<form>
			<!-- this hidden checkbox controls the state -->
			<input type="checkbox" class="theme-controller" value="emerald" hx-post="/theme"/>
			<!-- sun icon -->
			<svg class="swap-on h-10 w-10 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z"></path></svg>
			<!-- moon icon -->
			<svg class="swap-off h-10 w-10 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z"></path></svg>
		</form>
	</label>
}

templ HomePage(tfList []database.Timeframe, projectList []database.Project, locationList []database.Location,
	currentDate time.Time, workDurationDaily time.Duration, workDeltaWeek time.Duration, overtime database.ProjectHours, isWorkday bool) {
	@PageHeader(Records(tfList, projectList, locationList, currentDate, workDurationDaily, workDeltaWeek, overtime, isWorkday))
}
